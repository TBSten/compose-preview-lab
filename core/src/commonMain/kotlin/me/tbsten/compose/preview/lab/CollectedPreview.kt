package me.tbsten.compose.preview.lab

import androidx.compose.runtime.Composable
import org.jetbrains.compose.ui.tooling.preview.Preview

/**
 * Have @[Preview] information collected by gradle plugin. It can be used to display the Preview catalog by passing it to PreviewLabRoot.
 *
 * ```kt
 * // generated by gradle plugin
 * package myApp
 * val previews: List<CollectedPreview> = listOf(...)
 *
 * // user code
 * fun MyAppEntryPoint() {
 *   ComposePreviewLabRoot(
 *     previews = myApp.previews,
 *   )
 * }
 * ```
 *
 * In addition to collecting from the gradle plugin, you can also use the CollectedPreview function to represent a pseudo-Preview.
 *
 * ```kt
 * fun MyAppEntryPoint() {
 *   ComposePreviewLabRoot(
 *     previews = myAppPreviews + listOf(
 *       CollectedPreview(
 *         displayName = "MyButtonPreview",
 *         filePath = "myApp/src/main/kotlin/myApp/MyButtonPreview.kt",
 *         startLineNumber = 10,
 *         code = null,
 *       ) {
 *         MyButton(text = fieldValue { StringField("Click!") })
 *       },
 *     ),
 *   )
 * }
 * ```
 *
 * @property displayName The value set to displayName of the ComposePreviewLabOption annotation.
 * @property filePath The file where Preview exists.
 * @property startLineNumber The starting line number of Preview.
 * @property code The source code of Preview.
 * @property content The content of Preview. You can display the content of Preview by calling invoke().
 */
interface CollectedPreview {
    val displayName: String
    val filePath: String?
    val startLineNumber: Int?
    val code: String?
    val content: @Composable () -> Unit
}

internal data class CollectedPreviewImpl(
    override val displayName: String,
    override val filePath: String?,
    override val startLineNumber: Int? = null,
    override val code: String? = null,
    override val content: @Composable () -> Unit,
) : CollectedPreview

/**
 * Create a [CollectedPreview] instance.
 *
 * @param displayName The value set to displayName of the ComposePreviewLabOption annotation.
 * @param filePath The file where Preview exists.
 * @param startLineNumber The starting line number of Preview.
 * @param code The source code of Preview.
 * @param content The content of Preview. You can display the content of Preview by calling invoke().
 */
fun CollectedPreview(
    displayName: String,
    filePath: String?,
    startLineNumber: Int? = null,
    code: String? = null,
    content: @Composable () -> Unit,
): CollectedPreview = CollectedPreviewImpl(
    displayName = displayName,
    filePath = filePath,
    startLineNumber = startLineNumber,
    code = code,
    content = content,
)
